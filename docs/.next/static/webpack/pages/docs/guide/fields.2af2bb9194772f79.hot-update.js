"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/docs/guide/fields",{

/***/ "./src/pages/docs/guide/fields.md":
/*!****************************************!*\
  !*** ./src/pages/docs/guide/fields.md ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"__N_SSG\": function() { return /* binding */ __N_SSG; },\n/* harmony export */   \"default\": function() { return /* binding */ MarkdocComponent; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @swc/helpers/src/_object_spread.mjs */ \"../node_modules/.pnpm/@swc+helpers@0.4.3/node_modules/@swc/helpers/src/_object_spread.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"../node_modules/.pnpm/react@18.2.0/node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @markdoc/markdoc */ \"../node_modules/.pnpm/@markdoc+markdoc@0.1.5/node_modules/@markdoc/markdoc/dist/index.mjs\");\n/* harmony import */ var _Users_michaelhayes_code_pothos_node_modules_pnpm_markdoc_next_js_0_1_6_jjsrfpiyfiofxjmy5hvrhrneni_node_modules_markdoc_next_js_src_runtime_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../node_modules/.pnpm/@markdoc+next.js@0.1.6_jjsrfpiyfiofxjmy5hvrhrneni/node_modules/@markdoc/next.js/src/runtime.js */ \"../node_modules/.pnpm/@markdoc+next.js@0.1.6_jjsrfpiyfiofxjmy5hvrhrneni/node_modules/@markdoc/next.js/src/runtime.js\");\n/* harmony import */ var _Users_michaelhayes_code_pothos_docs_markdoc_tags_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./markdoc/tags.js */ \"./markdoc/tags.js\");\n/* harmony import */ var _Users_michaelhayes_code_pothos_docs_markdoc_nodes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./markdoc/nodes.js */ \"./markdoc/nodes.js\");\n\n\n// renderers is imported separately so Markdoc isn't sent to the client\n\n\n\n\n/**\n * Schema is imported like this so end-user's code is compiled using build-in babel/webpack configs.\n * This enables typescript/ESnext support\n */ var config = {};\nvar functions = {};\nvar schema = (0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_4__[\"default\"])({\n    tags: _Users_michaelhayes_code_pothos_docs_markdoc_tags_js__WEBPACK_IMPORTED_MODULE_2__ ? _Users_michaelhayes_code_pothos_docs_markdoc_tags_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"] || _Users_michaelhayes_code_pothos_docs_markdoc_tags_js__WEBPACK_IMPORTED_MODULE_2__ : {},\n    nodes: _Users_michaelhayes_code_pothos_docs_markdoc_nodes_js__WEBPACK_IMPORTED_MODULE_3__ ? _Users_michaelhayes_code_pothos_docs_markdoc_nodes_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"] || _Users_michaelhayes_code_pothos_docs_markdoc_nodes_js__WEBPACK_IMPORTED_MODULE_3__ : {},\n    functions: functions ? functions.default || functions : {}\n}, config ? config.default || config : {});\nvar components = (0,_Users_michaelhayes_code_pothos_node_modules_pnpm_markdoc_next_js_0_1_6_jjsrfpiyfiofxjmy5hvrhrneni_node_modules_markdoc_next_js_src_runtime_js__WEBPACK_IMPORTED_MODULE_1__.getSchema)(schema).components;\nvar __N_SSG = true;\nfunction MarkdocComponent(props) {\n    // Only execute HMR code in development\n    return _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_5__.renderers.react(props.markdoc.content, (react__WEBPACK_IMPORTED_MODULE_0___default()), {\n        components: (0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_4__[\"default\"])({}, components, props.components)\n    });\n};\n_c = MarkdocComponent;\nvar _c;\n$RefreshReg$(_c, \"MarkdocComponent\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcGFnZXMvZG9jcy9ndWlkZS9maWVsZHMubWQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7QUFBMEI7QUFFMUIsdUVBQXVFO0FBQ3BCO0FBRXlIO0FBTWhHO0FBQ0U7QUFOOUU7OztHQUdHLENBQ0gsSUFBTUssTUFBTSxHQUFHLEVBQUU7QUFHakIsSUFBTUMsU0FBUyxHQUFHLEVBQUU7QUFDcEIsSUFBTUMsTUFBTSxHQUFHO0lBQ2ZKLElBQUksRUFBRUEsaUZBQUksR0FBSUEsNEZBQVksSUFBSUEsaUZBQUksR0FBSSxFQUFFO0lBQ3hDQyxLQUFLLEVBQUVBLGtGQUFLLEdBQUlBLDZGQUFhLElBQUlBLGtGQUFLLEdBQUksRUFBRTtJQUM1Q0UsU0FBUyxFQUFFQSxTQUFTLEdBQUlBLFNBQVMsQ0FBQ0UsT0FBTyxJQUFJRixTQUFTLEdBQUksRUFBRTtHQUN4REQsTUFBTSxHQUFJQSxNQUFNLENBQUNHLE9BQU8sSUFBSUgsTUFBTSxHQUFJLEVBQUUsQ0FDM0M7QUFpQkQsSUFBTSxVQUFXLEdBQWFILHlMQUFTLENBQUNLLE1BQU0sQ0FBQyxDQUF4Q0UsVUFBVTs7QUE2Q0YsU0FBU0MsZ0JBQWdCLENBQUNDLEtBQUssRUFBRTtJQUM5Qyx1Q0FBdUM7SUFDdkMsT0FBT1YsNkRBQWUsQ0FBQ1UsS0FBSyxDQUFDRSxPQUFPLENBQUNDLE9BQU8sRUFBRWQsOENBQUssRUFBRTtRQUNuRFMsVUFBVSxFQUFFLG1GQUNQQSxVQUFVLEVBRVZFLEtBQUssQ0FBQ0YsVUFBVSxDQUNwQjtLQUNGLENBQUMsQ0FBQztDQUNKO0FBVHVCQyxLQUFBQSxnQkFBZ0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL3BhZ2VzL2RvY3MvZ3VpZGUvZmllbGRzLm1kPzcxZDYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB5YW1sIGZyb20gJ2pzLXlhbWwnO1xuLy8gcmVuZGVyZXJzIGlzIGltcG9ydGVkIHNlcGFyYXRlbHkgc28gTWFya2RvYyBpc24ndCBzZW50IHRvIHRoZSBjbGllbnRcbmltcG9ydCBNYXJrZG9jLCB7cmVuZGVyZXJzfSBmcm9tICdAbWFya2RvYy9tYXJrZG9jJ1xuXG5pbXBvcnQge2dldFNjaGVtYX0gZnJvbSAnL1VzZXJzL21pY2hhZWxoYXllcy9jb2RlL3BvdGhvcy9ub2RlX21vZHVsZXMvLnBucG0vQG1hcmtkb2MrbmV4dC5qc0AwLjEuNl9qanNyZnBpeWZpb2Z4am15NWh2cmhybmVuaS9ub2RlX21vZHVsZXMvQG1hcmtkb2MvbmV4dC5qcy9zcmMvcnVudGltZS5qcyc7XG4vKipcbiAqIFNjaGVtYSBpcyBpbXBvcnRlZCBsaWtlIHRoaXMgc28gZW5kLXVzZXIncyBjb2RlIGlzIGNvbXBpbGVkIHVzaW5nIGJ1aWxkLWluIGJhYmVsL3dlYnBhY2sgY29uZmlncy5cbiAqIFRoaXMgZW5hYmxlcyB0eXBlc2NyaXB0L0VTbmV4dCBzdXBwb3J0XG4gKi9cbmNvbnN0IGNvbmZpZyA9IHt9O1xuaW1wb3J0ICogYXMgdGFncyBmcm9tICcvVXNlcnMvbWljaGFlbGhheWVzL2NvZGUvcG90aG9zL2RvY3MvbWFya2RvYy90YWdzLmpzJ1xuaW1wb3J0ICogYXMgbm9kZXMgZnJvbSAnL1VzZXJzL21pY2hhZWxoYXllcy9jb2RlL3BvdGhvcy9kb2NzL21hcmtkb2Mvbm9kZXMuanMnXG5jb25zdCBmdW5jdGlvbnMgPSB7fTtcbmNvbnN0IHNjaGVtYSA9IHtcbnRhZ3M6IHRhZ3MgPyAodGFncy5kZWZhdWx0IHx8IHRhZ3MpIDoge30sXG5ub2Rlczogbm9kZXMgPyAobm9kZXMuZGVmYXVsdCB8fCBub2RlcykgOiB7fSxcbmZ1bmN0aW9uczogZnVuY3Rpb25zID8gKGZ1bmN0aW9ucy5kZWZhdWx0IHx8IGZ1bmN0aW9ucykgOiB7fSxcbi4uLihjb25maWcgPyAoY29uZmlnLmRlZmF1bHQgfHwgY29uZmlnKSA6IHt9KSxcbn07XG5cbi8qKlxuICogU291cmNlIHdpbGwgbmV2ZXIgY2hhbmdlIGF0IHJ1bnRpbWUsIHNvIHBhcnNlIGhhcHBlbnMgYXQgdGhlIGZpbGUgcm9vdFxuICovXG5jb25zdCBzb3VyY2UgPSBcIi0tLVxcbm5hbWU6IEZpZWxkc1xcbnRpdGxlOiBEZWZpbmluZyBmaWVsZHMgaW4gUG90aG9zXFxubWVudTogR3VpZGVcXG5kZXNjcmlwdGlvbjogR3VpZGUgZm9yIGRlZmluaW5nIGZpZWxkcyBpbiBQb3Rob3NcXG4tLS1cXG5cXG5GaWVsZHMgZm9yIFtPYmplY3RdKC4vb2JqZWN0cykgYW5kIFtJbnRlcmZhY2VdKC4vaW50ZXJmYWNlcykgdHlwZXMgYXJlIGRlZmluZWQgdXNpbmcgYSBzaGFwZVxcbmZ1bmN0aW9uLiBUaGlzIGlzIGEgZnVuY3Rpb24gdGhhdCB0YWtlcyBhIFtGaWVsZEJ1aWxkZXJdKC4uL2FwaS9maWVsZC1idWlsZGVyKSBhcyBhbiBhcmd1bWVudCwgYW5kXFxucmV0dXJucyBhbiBvYmplY3Qgd2hvJ3Mga2V5cyBhcmUgZmllbGQgbmFtZXMsIGFuZCB3aG8ncyB2YWx1ZXMgYXJlIGZpZWxkcyBjcmVhdGVkIGJ5IHRoZVxcbltGaWVsZEJ1aWxkZXJdKC4uL2FwaS9maWVsZC1idWlsZGVyKS4gVGhlc2UgZXhhbXBsZXMgd2lsbCBtb3N0bHkgYWRkIGZpZWxkcyB0byB0aGUgYFF1ZXJ5YCB0eXBlLCBidXRcXG50aGUgdG9waWNzIGNvdmVyZWQgaW4gdGhpcyBndWlkZSBzaG91bGQgYXBwbHkgdG8gYW55IG9iamVjdCBvciBpbnRlcmZhY2UgdHlwZS5cXG5cXG4jIyBTY2FsYXJzXFxuXFxuU2NhbGFyIGZpZWxkcyBjYW4gYmUgZGVmaW5lZCBhIGNvdXBsZSBvZiBkaWZmZXJlbnQgd2F5czpcXG5cXG4jIyMgRmllbGQgbWV0aG9kXFxuXFxuYGBgdHlwZXNjcmlwdFxcbmJ1aWxkZXIucXVlcnlUeXBlKHtcXG4gIGZpZWxkczogdCA9PiAoe1xcbiAgICBuYW1lOiB0LmZpZWxkKHtcXG4gICAgICBkZXNjcmlwdGlvbjogJ05hbWUgZmllbGQnXFxuICAgICAgdHlwZTogJ1N0cmluZycsXFxuICAgICAgcmVzb2x2ZTogKCkgPT4gJ0dpbmEnLFxcbiAgICB9KSxcXG4gIH0pLFxcbn0pO1xcbmBgYFxcblxcbiMjIyBDb252ZW5pZW5jZSBtZXRob2RzXFxuXFxuQ29udmVuaWVuY2UgbWV0aG9kcyBhcmUganVzdCBhIHdyYXBwZXIgYXJvdW5kIHRoZSBgZmllbGRgIG1ldGhvZCwgdGhhdCBvbWl0IHRoZSBgdHlwZWAgb3B0aW9uLlxcblxcbmBgYHR5cGVzY3JpcHRcXG5idWlsZGVyLnF1ZXJ5VHlwZSh7XFxuICBmaWVsZHM6ICh0KSA9PiAoe1xcbiAgICBpZDogdC5pZCh7IHJlc29sdmU6ICgpID0+ICcxMjMnIH0pLFxcbiAgICBpbnQ6IHQuaW50KHsgcmVzb2x2ZTogKCkgPT4gMTIzIH0pLFxcbiAgICBmbG9hdDogdC5mbG9hdCh7IHJlc29sdmU6ICgpID0+IDEuMjMgfSksXFxuICAgIGJvb2xlYW46IHQuYm9vbGVhbih7IHJlc29sdmU6ICgpID0+IGZhbHNlIH0pLFxcbiAgICBzdHJpbmc6IHQuc3RyaW5nKHsgcmVzb2x2ZTogKCkgPT4gJ2FiYycgfSksXFxuICAgIGlkTGlzdDogdC5pZExpc3QoeyByZXNvbHZlOiAoKSA9PiBbJzEyMyddIH0pLFxcbiAgICBpbnRMaXN0OiB0LmludExpc3QoeyByZXNvbHZlOiAoKSA9PiBbMTIzXSB9KSxcXG4gICAgZmxvYXRMaXN0OiB0LmZsb2F0TGlzdCh7IHJlc29sdmU6ICgpID0+IFsxLjIzXSB9KSxcXG4gICAgYm9vbGVhbkxpc3Q6IHQuYm9vbGVhbkxpc3QoeyByZXNvbHZlOiAoKSA9PiBbZmFsc2VdIH0pLFxcbiAgICBzdHJpbmdMaXN0OiB0LnN0cmluZ0xpc3QoeyByZXNvbHZlOiAoKSA9PiBbJ2FiYyddIH0pLFxcbiAgfSksXFxufSk7XFxuYGBgXFxuXFxuIyMgT3RoZXIgdHlwZXNcXG5cXG5GaWVsZHMgZm9yIG5vbi1zY2FsYXIgZmllbGRzIGNhbiBhbHNvIGJlIGNyZWF0ZWQgd2l0aCB0aGUgYGZpZWxkYCBtZXRob2QuXFxuXFxuU29tZSB0eXBlcyBsaWtlIFtPYmplY3RzXSguL29iamVjdHMpIGFuZCBbSW50ZXJmYWNlc10oLi9pbnRlcmZhY2VzKSBjYW4gYmUgcmVmZXJlbmNlZCBieSBuYW1lIGlmXFxudGhleSBoYXZlIGEgYmFja2luZyBtb2RlbCBkZWZpbmVkIGluIHRoZSBzY2hlbWEgYnVpbGRlci5cXG5cXG5gYGB0eXBlc2NyaXB0XFxuY29uc3QgYnVpbGRlciA9IG5ldyBTY2hlbWFCdWlsZGVyPHtcXG4gIE9iamVjdHM6IHsgR2lyYWZmZTogeyBuYW1lOiBzdHJpbmcgfSB9O1xcbn0+KHt9KTtcXG5cXG5idWlsZGVyLnF1ZXJ5VHlwZSh7XFxuICBmaWVsZHM6IHQgPT4gKHtcXG4gICAgZ2lyYWZmZTogdC5maWVsZCh7XFxuICAgICAgZGVzY3JpcHRpb246ICdBIGdpcmFmZmUnXFxuICAgICAgdHlwZTogJ0dpcmFmZmUnLFxcbiAgICAgIHJlc29sdmU6ICgpID0+ICh7IG5hbWU6ICdHaW5hJyB9KSxcXG4gICAgfSksOlxcbiAgfSksXFxufSk7XFxuYGBgXFxuXFxuRm9yIHR5cGVzIG5vdCBkZXNjcmliZWQgaW4gdGhlIGBTY2hlbWFUeXBlc2AgdHlwZSBwcm92aWRlZCB0byB0aGUgYnVpbGRlciwgaW5jbHVkaW5nIHR5cGVzIHRoYXQgY2FuXFxubm90IGJlIGFkZGVkIHRoZXJlIGxpa2UgW1VuaW9uc10oLi91bmlvbnMpIGFuZCBbRW51bXNdKC4vZW51bXMpLCB5b3UgY2FuIHVzZSBhIGBSZWZgIHJldHVybmVkIGJ5IHRoZVxcbmJ1aWxkZXIgbWV0aG9kIHRoYXQgY3JlYXRlZCB0aGVtIGluIHRoZSBgdHlwZWAgcGFyYW1ldGVyLiBGb3IgdHlwZXMgY3JlYXRlZCB1c2luZyBhIGNsYXNzXFxuXFxcXChbT2JqZWN0c10oLi9lbnVtcykgb3IgW0ludGVyZmFjZXNdKC4vaW50ZXJmYWNlcylcXFxcKSBvciBbRW51bXNdKC4vZW51bXMpIGNyZWF0ZWQgdXNpbmcgYSB0eXBlc2NyaXB0XFxuZW51bSwgeW91IGNhbiBhbHNvIHVzZSB0aGUgdGhlIGBjbGFzc2Agb3IgYGVudW1gIHRoYXQgd2FzIHVzZWQgdG8gZGVmaW5lIHRoZW0uXFxuXFxuYGBgdHlwZXNjcmlwdFxcbmNvbnN0IExlbmd0aFVuaXQgPSBidWlsZGVyLmVudW1UeXBlKCdMZW5ndGhVbml0Jywge1xcbiAgdmFsdWVzOiB7IEZlZXQ6IHt9LCBNZXRlcnM6IHt9IH0sXFxufSk7XFxuXFxuYnVpbGRlci5vYmplY3RUeXBlKCdHaXJhZmZlJywge1xcbiAgZmllbGRzOiAodCkgPT4gKHtcXG4gICAgcHJlZmVycmVkTmVja0xlbmd0aFVuaXQ6IHQuZmllbGQoe1xcbiAgICAgIHR5cGU6IExlbmd0aFVuaXQsXFxuICAgICAgcmVzb2x2ZTogKCkgPT4gJ0ZlZXQnLFxcbiAgICB9KSxcXG4gIH0pLFxcbn0pO1xcblxcbmJ1aWxkZXIucXVlcnlUeXBlKHtcXG4gIGZpZWxkczogKHQpID0+ICh7XFxuICAgIGdpcmFmZmU6IHQuZmllbGQoe1xcbiAgICAgIHR5cGU6ICdHaXJhZmZlJyxcXG4gICAgICByZXNvbHZlOiAoKSA9PiAoeyBuYW1lOiAnR2luYScgfSksXFxuICAgIH0pLFxcbiAgfSksXFxufSk7XFxuYGBgXFxuXFxuIyMgTGlzdHNcXG5cXG5UbyBjcmVhdGUgYSBsaXN0IGZpZWxkLCB5b3UgY2FuIHdyYXAgdGhlIHRoZSB0eXBlIGluIGFuIGFycmF5XFxuXFxuYGBgdHlwZXNjcmlwdFxcbmJ1aWxkZXIucXVlcnlUeXBlKHtcXG4gIGZpZWxkczogdCA9PiAoe1xcbiAgICBnaXJhZmZlczogdC5maWVsZCh7XFxuICAgICAgZGVzY3JpcHRpb246ICdtdWx0aXBsZSBnaXJhZmZlcydcXG4gICAgICB0eXBlOiBbJ0dpcmFmZmUnXSxcXG4gICAgICByZXNvbHZlOiAoKSA9PiBbeyBuYW1lOiAnR2luYScgfSwgeyBuYW1lOiAnSmFtZXMnIH1dLFxcbiAgICB9KSxcXG4gICAgZ2lyYWZmZU5hbWVzOiB0LmZpZWxkKHtcXG4gICAgICB0eXBlOiBbJ1N0cmluZyddLFxcbiAgICAgIHJlc29sdmU6ICgpID0+IFsnR2luYScsICdKYW1lcyddLFxcbiAgICB9KVxcbiAgfSksXFxufSk7XFxuYGBgXFxuXFxuIyMgTnVsbGFibGUgZmllbGRzXFxuXFxuVW5saWtlIHNvbWUgb3RoZXIgR3JhcGhRTCBpbXBsZW1lbnRhdGlvbnMsIGZpZWxkcyBpbiBQb3Rob3MgYXJlIG5vbi1udWxsYWJsZSBieSBkZWZhdWx0LiBJdCBpcyBzdGlsbFxcbm9mdGVuIGRlc2lyYWJsZSB0byBtYWtlIGZpZWxkcyBpbiB5b3VyIHNjaGVtYSBudWxsYWJsZS4gVGhpcyBkZWZhdWx0IGNhbiBiZSBjaGFuZ2VkIGluIHRoZVxcblNjaGVtYUJ1aWxkZXIgY29uc3RydWN0b3IsIHNlZSBbQ2hhbmdpbmcgRGVmYXVsdCBOdWxsYWJpbGl0eV0oLi9jaGFuZ2luZy1kZWZhdWx0LW51bGxhYmlsaXR5KS5cXG5cXG5gYGB0eXBlc2NyaXB0XFxuYnVpbGRlci5xdWVyeVR5cGUoe1xcbiAgZmllbGRzOiAodCkgPT4gKHtcXG4gICAgbnVsbGFibGVGaWVsZDogdC5maWVsZCh7XFxuICAgICAgdHlwZTogJ1N0cmluZycsXFxuICAgICAgbnVsbGFibGU6IHRydWUsXFxuICAgICAgcmVzb2x2ZTogKCkgPT4gbnVsbCxcXG4gICAgfSksXFxuICAgIG51bGxhYmxlU3RyaW5nOiB0LnN0cmluZyh7XFxuICAgICAgbnVsbGFibGU6IHRydWUsXFxuICAgICAgcmVzb2x2ZTogKCkgPT4gbnVsbCxcXG4gICAgfSksXFxuICAgIG51bGxhYmxlTGlzdDogdC5maWVsZCh7XFxuICAgICAgdHlwZTogWydTdHJpbmcnXSxcXG4gICAgICBudWxsYWJsZTogdHJ1ZSxcXG4gICAgICByZXNvbHZlOiAoKSA9PiBudWxsLFxcbiAgICB9KSxcXG4gICAgc3BhcmVzZUxpc3Q6IHQuZmllbGQoe1xcbiAgICAgIHR5cGU6IFsnU3RyaW5nJ10sXFxuICAgICAgbnVsbGFibGU6IHtcXG4gICAgICAgIGxpc3Q6IGZhbHNlLFxcbiAgICAgICAgaXRlbXM6IHRydWUsXFxuICAgICAgfSxcXG4gICAgICByZXNvbHZlOiAoKSA9PiBbbnVsbF0sXFxuICAgIH0pLFxcbiAgfSksXFxufSk7XFxuYGBgXFxuXFxuTm90ZSB0aGF0IGJ5IGRlZmF1bHQgZXZlbiBpZiBhIGxpc3QgZmllbGQgaXMgbnVsbGFibGUsIHRoZSBpdGVtcyBpbiB0aGF0IGxpc3QgYXJlIG5vdC4gVGhlIGxhc3RcXG5leGFtcGxlIGFib3ZlIHNob3dzIGhvdyB5b3UgY2FuIG1ha2UgbGlzdCBpdGVtcyBudWxsYWJsZS5cXG5cXG4jIyBFeHBvc2luZyBmaWVsZHMgZnJvbSB0aGUgdW5kZXJseWluZyBkYXRhXFxuXFxuU29tZSBHcmFwaFFMIGltcGxlbWVudGF0aW9ucyBoYXZlIGEgY29uY2VwdCBvZiBcXFwiZGVmYXVsdCByZXNvbHZlcnNcXFwiIHRoYXQgY2FuIGF1dG9tYXRpY2FsbHkgcmVzb2x2ZVxcbmZpZWxkIHRoYXQgaGF2ZSBhIHByb3BlcnR5IG9mIHRoZSBzYW1lIG5hbWUgaW4gdGhlIHVuZGVybHlpbmcgZGF0YS4gSW4gUG90aG9zLCB0aGVzZSByZWxhdGlvbnNoaXBzXFxubmVlZCB0byBiZSBleHBsaWNpdGx5IGRlZmluZWQsIGJ1dCB0aGVyZSBhcmUgaGVscGVyIG1ldGhvZHMgdGhhdCBtYWtlIGV4cG9zaW5nIGZpZWxkcyBlYXNpZXIuXFxuXFxuVGhlc2UgaGVscGVycyBhcmUgbm90IGF2YWlsYWJsZSBmb3Igcm9vdCB0eXBlcyBcXFxcKFF1ZXJ5LCBNdXRhdGlvbiBhbmQgU3Vic2NyaXB0aW9uXFxcXCksIGJ1dCB3aWxsIHdvcmtcXG5vbiBhbnkgb3RoZXIgb2JqZWN0IHR5cGUgb3IgaW50ZXJmYWNlLlxcblxcbmBgYHR5cGVzY3JpcHRcXG5jb25zdCBidWlsZGVyID0gbmV3IFNjaGVtYUJ1aWxkZXI8e1xcbiAgT2JqZWN0czogeyBHaXJhZmZlOiB7IG5hbWU6IHN0cmluZyB9IH07XFxufT4oe30pO1xcblxcbmJ1aWxkZXIub2JqZWN0VHlwZSgnR2lyYWZmZScsIHtcXG4gIGZpZWxkczogKHQpID0+ICh7XFxuICAgIG5hbWU6IHQuZXhwb3NlU3RyaW5nKCduYW1lJywge30pLFxcbiAgfSksXFxufSk7XFxuYGBgXFxuXFxuVGhlIGF2YWlsYWJsZSBleHBvc2UgaGVscGVycyBhcmU6XFxuXFxuLSBgZXhwb3NlU3RyaW5nYFxcbi0gYGV4cG9zZUludGBcXG4tIGBleHBvc2VGbG9hdGBcXG4tIGBleHBvc2VCb29sZWFuYFxcbi0gYGV4cG9zZUlEYFxcbi0gYGV4cG9zZVN0cmluZ0xpc3RgXFxuLSBgZXhwb3NlSW50TGlzdGBcXG4tIGBleHBvc2VGbG9hdExpc3RgXFxuLSBgZXhwb3NlQm9vbGVhbkxpc3RgXFxuLSBgZXhwb3NlSURMaXN0YFxcblxcbiMjIEFyZ3VtZW50c1xcblxcbkFyZ3VtZW50cyBmb3IgYSBmaWVsZCBjYW4gZGVmaW5lZCBpbiB0aGUgb3B0aW9ucyBmb3IgYSBmaWVsZDpcXG5cXG5gYGB0eXBlc2NyaXB0XFxuYnVpbGRlci5xdWVyeVR5cGUoe1xcbiAgZmllbGRzOiAodCkgPT4gKHtcXG4gICAgZ2lyYWZmZUJ5TmFtZTogdC5maWVsZCh7XFxuICAgICAgdHlwZTogJ0dpcmFmZmUnLFxcbiAgICAgIGFyZ3M6IHtcXG4gICAgICAgIG5hbWU6IHQuYXJnLnN0cmluZyh7IHJlcXVpcmVkOiB0cnVlIH0pLFxcbiAgICAgIH0sXFxuICAgICAgcmVzb2x2ZTogKHJvb3QsIGFyZ3MpID0+IHtcXG4gICAgICAgIGlmIChhcmdzLm5hbWUgIT09ICdHaW5hJykge1xcbiAgICAgICAgICB0aHJvdyBuZXcgTm90Rm91bmRFcnJvcihgVW5rbm93biBHaXJhZmZlICR7bmFtZX1gKTtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIHJldHVybiB7IG5hbWU6ICdHaW5hJyB9O1xcbiAgICAgIH0sXFxuICAgIH0pLFxcbiAgfSksXFxufSk7XFxuYGBgXFxuXFxuRm9yIG1vcmUgaW5mb3JtYXRpb24gc2VlIHRoZSBbQXJndW1lbnRzIEd1aWRlXSguL2FyZ3MpLlxcblxcbiMjIEFkZGluZyBmaWVsZHMgdG8gZXhpc3RpbmcgdHlwZVxcblxcbkluIGFkZGl0aW9uIHRvIGJlaW5nIGFibGUgdG8gZGVmaW5lIGZpZWxkcyB3aGVuIGRlZmluaW5nIHR5cGVzLCB5b3UgY2FuIGFsc28gYWRkIGFkZGl0aW9uYWwgZmllbGRzXFxuaW5kZXBlbmRlbnRseS4gVGhpcyBpcyB1c2VmdWwgZm9yIGJyZWFraW5nIHVwIHR5cGVzIHdpdGggYSBsb3Qgb2YgZmllbGRzIGludG8gbXVsdGlwbGUgZmlsZXMsIG9yXFxuY28tbG9jYXRpbmcgZmllbGRzIHdpdGggdGhlaXIgdHlwZSBcXFxcKGVnLiBhZGQgYWxsIHF1ZXJ5L211dGF0aW9uIGZpZWxkcyBmb3IgYSB0eXBlIGluIHRoZSBzYW1lIGZpbGVcXG53aGVyZSB0aGUgdHlwZSBpcyBkZWZpbmVkXFxcXCkuXFxuXFxuYGBgdHlwZXNjcmlwdFxcbmJ1aWxkZXIucXVlcnlGaWVsZHMoKHQpID0+ICh7XFxuICBnaXJhZmZlOiB0LmZpZWxkKHtcXG4gICAgdHlwZTogR2lyYWZmZSxcXG4gICAgcmVzb2x2ZTogKCkgPT4gbmV3IEdpcmFmZmUoJ0phbWVzJywgbmV3IERhdGUoRGF0ZS5VVEMoMjAxMiwgMTEsIDEyKSksIDUuMiksXFxuICB9KSxcXG59KSk7XFxuXFxuYnVpbGRlci5vYmplY3RGaWVsZChHaXJhZmZlLCAnYWdlSW5Eb2dZZWFycycsICh0KSA9PlxcbiAgdC5pbnQoe1xcbiAgICByZXNvbHZlOiAocGFyZW50KSA9PiBwYXJlbnQuYWdlICogNyxcXG4gIH0pLFxcbik7XFxuYGBgXFxuXFxuVG8gc2VlIGFsbCB0aGV5IG1ldGhvZHMgYXZhaWxhYmxlIGZvciBkZWZpbmluZyBmaWVsZHMgc2VlIHRoZSBbU2NoZW1hQnVpbGRlciBBUEldKC4vc2NoZW1hLWJ1aWxkZXIpXFxuXCI7XG5jb25zdCBmaWxlcGF0aCA9IFwiL2RvY3MvZ3VpZGUvZmllbGRzLm1kXCI7XG5jb25zdCBhc3QgPSBNYXJrZG9jLnBhcnNlKHNvdXJjZSk7XG5cbi8qKlxuICogTGlrZSB0aGUgQVNULCBmcm9udG1hdHRlciB3b24ndCBjaGFuZ2UgYXQgcnVudGltZSwgc28gaXQgaXMgbG9hZGVkIGF0IGZpbGUgcm9vdC5cbiAqIFRoaXMgdW5ibG9ja3MgZnV0dXJlIGZlYXR1cmVzLCBzdWNoIGEgcGVyLXBhZ2UgZGF0YUZldGNoaW5nRnVuY3Rpb24uXG4gKi9cbmNvbnN0IGZyb250bWF0dGVyID0gYXN0LmF0dHJpYnV0ZXMuZnJvbnRtYXR0ZXJcbiAgPyB5YW1sLmxvYWQoYXN0LmF0dHJpYnV0ZXMuZnJvbnRtYXR0ZXIpXG4gIDoge307XG5cbmNvbnN0IHtjb21wb25lbnRzLCAuLi5yZXN0fSA9IGdldFNjaGVtYShzY2hlbWEpXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRTdGF0aWNQcm9wcyhjb250ZXh0KSB7XG4gIGNvbnN0IHBhcnRpYWxzID0ge307XG5cbiAgLy8gRW5zdXJlIE5vZGUudHJhbnNmb3JtQ2hpbGRyZW4gaXMgYXZhaWxhYmxlXG4gIE9iamVjdC5rZXlzKHBhcnRpYWxzKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBwYXJ0aWFsc1trZXldID0gTWFya2RvYy5wYXJzZShwYXJ0aWFsc1trZXldKTtcbiAgfSk7XG5cbiAgY29uc3QgY2ZnID0ge1xuICAgIC4uLnJlc3QsXG4gICAgdmFyaWFibGVzOiB7XG4gICAgICAuLi4ocmVzdCA/IHJlc3QudmFyaWFibGVzIDoge30pLFxuICAgICAgLy8gdXNlciBjYW4ndCBvdmVycmlkZSB0aGlzIG5hbWVzcGFjZVxuICAgICAgbWFya2RvYzoge2Zyb250bWF0dGVyfSxcbiAgICAgIC8vIEFsbG93cyB1c2VycyB0byBlamVjdCBmcm9tIE1hcmtkb2MgcmVuZGVyaW5nIGFuZCBwYXNzIGluIGR5bmFtaWMgdmFyaWFibGVzIHZpYSBnZXRTZXJ2ZXJTaWRlUHJvcHNcbiAgICAgIC4uLihjb250ZXh0LnZhcmlhYmxlcyB8fCB7fSlcbiAgICB9LFxuICAgIHBhcnRpYWxzLFxuICAgIHNvdXJjZSxcbiAgfTtcblxuICAvKipcbiAgICogdHJhbnNmb3JtIG11c3QgYmUgY2FsbGVkIGluIGRhdGFGZXRjaGluZ0Z1bmN0aW9uIHRvIHN1cHBvcnQgc2VydmVyLXNpZGUgcmVuZGVyaW5nIHdoaWxlXG4gICAqIGFjY2Vzc2luZyB2YXJpYWJsZXMgb24gdGhlIHNlcnZlclxuICAgKi9cbiAgY29uc3QgY29udGVudCA9IE1hcmtkb2MudHJhbnNmb3JtKGFzdCwgY2ZnKTtcblxuICByZXR1cm4ge1xuICAgIC8vIFJlbW92ZXMgdW5kZWZpbmVkXG4gICAgcHJvcHM6IEpTT04ucGFyc2UoXG4gICAgICBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIG1hcmtkb2M6IHtcbiAgICAgICAgICBjb250ZW50LFxuICAgICAgICAgIGZyb250bWF0dGVyLFxuICAgICAgICAgIGZpbGU6IHtcbiAgICAgICAgICAgIHBhdGg6IGZpbGVwYXRoXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgfSlcbiAgICApLFxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNYXJrZG9jQ29tcG9uZW50KHByb3BzKSB7XG4gIC8vIE9ubHkgZXhlY3V0ZSBITVIgY29kZSBpbiBkZXZlbG9wbWVudFxuICByZXR1cm4gcmVuZGVyZXJzLnJlYWN0KHByb3BzLm1hcmtkb2MuY29udGVudCwgUmVhY3QsIHtcbiAgICBjb21wb25lbnRzOiB7XG4gICAgICAuLi5jb21wb25lbnRzLFxuICAgICAgLy8gQWxsb3dzIHVzZXJzIHRvIG92ZXJyaWRlIGRlZmF1bHQgY29tcG9uZW50cyBhdCBydW50aW1lLCB2aWEgdGhlaXIgX2FwcFxuICAgICAgLi4ucHJvcHMuY29tcG9uZW50cyxcbiAgICB9LFxuICB9KTtcbn1cbiJdLCJuYW1lcyI6WyJSZWFjdCIsInJlbmRlcmVycyIsImdldFNjaGVtYSIsInRhZ3MiLCJub2RlcyIsImNvbmZpZyIsImZ1bmN0aW9ucyIsInNjaGVtYSIsImRlZmF1bHQiLCJjb21wb25lbnRzIiwiTWFya2RvY0NvbXBvbmVudCIsInByb3BzIiwicmVhY3QiLCJtYXJrZG9jIiwiY29udGVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/pages/docs/guide/fields.md\n"));

/***/ })

});